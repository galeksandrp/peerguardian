#!/bin/sh
# if-up - insert blockcontrol iptables whitelisting rules for newly brought up
# interfaces.
# Copyright (C) 2008 - 2009 jre <jre-phoenix@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

################################################################################
# The following code is common between blockcontrol, cron.daily, if-up, init,
# and debian/postinst.
# It sets/loads the variables and functions

# This variable has to be set correctly in all just mentioned files.
# CONTROL_CONF has to be set in CONTROL_DEFAULTS.
# Everything else can then be done in blockcontrol.conf.
CONTROL_DEFAULTS="/usr/lib/blockcontrol/blockcontrol.defaults"

# Set sane configuration defaults, including the NAME of the installed daemon.
# Then load the configured values fromCONTROL_CONF and CONTROL_DEFAULT, source
# the blockcontrol.lib AND the LSB init.functions.
if [ -f "$CONTROL_DEFAULTS" ] ; then
	. $CONTROL_DEFAULTS || { echo "$0 Error: Failed to source $CONTROL_DEFAULTS although this file exists."; exit 1; }
else
	echo "$0 Error 7: Missing file $CONTROL_DEFAULTS."
	exit 7
fi

# End of the common code between blockcontrol, cron.daily, if-up, init,
# and debian/postinst.
################################################################################

test_root
test_DAEMON
test_CONTROL_SCRIPT
test_IPTABLES_VARS

if [ "$WHITE_LOCAL" -eq 1 ] && [ "$IPTABLES_SETTINGS" -eq 1 ] && status_of_proc $DAEMON $NAME > /dev/null 2>&1 ; then
	test_external iptables

	# Get IPs (only the first triplets) of interfaces that are up
	LOCAL_IPS=$(ifconfig | grep -o "inet addr:[[:space:]]*[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" | grep -o "[0-9]*\.[0-9]*\.[0-9]*\." | sed s/inet\ addr:[[:space:]]*//)
	for IP in $LOCAL_IPS ; do
		case $IP in
			127.*)	# IP is the loopback IP: If loopback device is not already whitelisted then insert whitelisting rules for whole loopback interface
				iptables -nv -L ${CONTROL_NAME}_in |  grep "${IPTABLES_TARGET_WHITELISTING}[[:space:]]*all[[:space:]]*--[[:space:]]*lo" > /dev/null 2>&1 || { \
				iptables -I ${CONTROL_NAME}_in -i lo -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					}
				iptables -nv -L ${CONTROL_NAME}_out |  grep "${IPTABLES_TARGET_WHITELISTING}[[:space:]]*all[[:space:]]*--[[:space:]]*\*[[:space:]]*lo" > /dev/null 2>&1 || { \
					iptables -I ${CONTROL_NAME}_out -o lo -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					}
				;;
			*)	# If the LAN is not already whitelisted then insert whitelisting rules for LAN (IP with subnetmask /24)
				iptables -nv -L ${CONTROL_NAME}_in | grep ${IP}0/24  > /dev/null 2>&1 || { \
					iptables -I ${CONTROL_NAME}_in --source ${IP}0/24 -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					}
				iptables -nv -L ${CONTROL_NAME}_out | grep ${IP}0/24  > /dev/null 2>&1 || { \
					iptables -I ${CONTROL_NAME}_out --destination ${IP}0/24 -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					}
				iptables -nv -L ${CONTROL_NAME}_fw | grep ${IP}0/24  > /dev/null 2>&1 || { \
					iptables -I ${CONTROL_NAME}_fw --source ${IP}0/24 -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					iptables -I ${CONTROL_NAME}_fw --destination ${IP}0/24 -j $IPTABLES_TARGET_WHITELISTING || { log_end_msg $? ; exit $E_IPTABLES ; }
					}
				;;
		esac
	done
fi

exit 0

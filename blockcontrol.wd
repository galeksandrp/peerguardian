#!/bin/sh
# blockcontrol.wd
# Copyright (C) 2009 jre <jre-phoenix@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e

################################################################################
# The following code is common between blockcontrol, blockcontrol.wd,
# cron.daily, init and debian/postinst.

# if-up is similar, but exits successfully if CONTROL_MAIN is not there, yet.
# This can happen in early boot stages before local file systems are mounted.

# CONTROL_MAIN has to be set correctly in all just mentioned files.
CONTROL_MAIN="/usr/lib/blockcontrol/blockcontrol.main"

# Configure blockcontrol and load functions.
if [ -f "$CONTROL_MAIN" ] ; then
	. $CONTROL_MAIN || { echo "$0 Error: Failed to source $CONTROL_MAIN although this file exists."; exit 1; }
else
	echo "$0 Error 7: Missing file $CONTROL_MAIN."
	exit 7
fi

# End of the common code between blockcontrol, blockcontrol.wd,
# cron.daily, (if-up), init and debian/postinst.
################################################################################

# Don´t run this script directly, some tests have to be done in the control script
# and I don´t want to repeat them here.

test_root

# Check if watchdog is already running.
[ ! -f "$WD_PID" ] || { log_success_msg "$WD_PID exists, doing nothing." ; exit 0 ; }

RETVAL=0

# The iptables setup has to be done completely by blockcontrol
[ "$IPTABLES_SETTINGS" -gt 0 ] || {
	log_failure_msg "Error $E_CONFIG: IPTABLES_SETTINGS has to be greater 0."
	exit $E_CONFIG
	}

[ "$IPTABLES_ACTIVATION" -gt 0 ] || {
	log_failure_msg "Error $E_CONFIG: IPTABLES_ACTIVATION has to be greater 0."
	exit $E_CONFIG
	}

[ "$WD_SLEEP" -gt 0 ] || {
	log_failure_msg "Error $E_CONFIG: WD_SLEEP has to be greater 0."
	log_failure_msg "Not starting $(basename $WD_PATHNAME)."
	exit $E_CONFIG
	}

# Define an exit function for trapped signals
onexit () {
        RETVAL="$?"
        rm -f "$WD_PID"
        exit $RETVAL
}

# Trap specified signals, and remove pidfile & exit on them.
# Not sure which signals to specify. "KILL" can´t be trapped!
# Not HUP.
trap onexit INT SEGV QUIT TERM EXIT

# Create pidfile.
echo $$ > $WD_PID

while true ; do
	sleep $WD_SLEEP
	{
		# First check if the daemon is running.
		status_of_proc $DAEMON $NAME > /dev/null 2>&1 && \
		# Then check if traffic "might" be sent to the daemon.
		iptables -L INPUT -n | grep "${CONTROL_NAME}_in" > /dev/null 2>&1 && \
		iptables -L OUTPUT -n | grep "${CONTROL_NAME}_out" > /dev/null 2>&1 && \
		iptables -L ${CONTROL_NAME}_in -n | grep "$IPTABLES_TARGET" > /dev/null 2>&1 && \
		iptables -L ${CONTROL_NAME}_out -n | grep "$IPTABLES_TARGET" > /dev/null 2>&1
		# Not using "test" here, because ping fails if network is down,
		# other iptables rules might block the test packet before it reaches
		# blockcontrol or the test packet might be whitelisted.
	} || {
		echo "$0: $NAME does not block!"
		echo "In most cases another firewall application did mess up our iptables rules."
		echo "Remember to make a \"${CONTROL_NAME} restart\" whenever you start, stop or change"
		echo "the configuration of your other firewall applications."
		echo "To disable the watchdog set WATCHDOG=\"0\" in $CONTROL_CONF."
		echo "Now restarting ${CONTROL_NAME} ..."
		${CONTROL_NAME} restart
	} || {
		# We only end up here, if restart fails before it terminates the watchdog!
		log_failure_msg "Failed! Stopping $(basename $WD_PATHNAME) now!"
		rm -f $WD_PID || { log_failure_msg " Error: rm exited with $?" ; exit 1; }
		exit 1
	}
done
# We should never end here!

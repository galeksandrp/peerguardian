/***************************************************************************
 *   Copyright (C) 2007-2008 by Dimitris Palyvos-Giannas   *
 *   jimaras@gmail.com   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef PEERGUARDIAN_LOG_H
#define PEERGUARDIAN_LOG_H

#include <QString>
#include <QProcess>
#include <QStringList>
#include <QVector>
#include <QList>
#include <QtDebug>
#include <QTime>
#include <QDate>



#define MAX_LOG_SIZE 1000
#define PGL_LOG_PATH "/var/log/pgl/pglcmd.log"

#define IN_STR "Incoming"
#define OUT_STR "Outgoing"
#define FWD_STR "Forward"


typedef enum itemType { BLOCK_IN, BLOCK_OUT, BLOCK_FWD, ERROR, IGNORE };

typedef 

/**
*
* @short Class representing each entry in the moblock log file
*
*/

class LogItem {

	public:
		/**
		 * Constructor. Saves the date and time the object was created
		 */
		LogItem() { initDateTime(); }
		/**
		 * Constructor. Saves the date and time and analyzes the log item's data.
		 * @param entry The line from the moblock log file.
		 */
		LogItem( const QString &entry );
		/**
		 * Destructor
		 */
		~LogItem() { }
		/**
		* @return The name of the entry in the moblock log.
		*/
		inline QString name() const { return m_Name; }
		/**
		 * @return The hits of the entry in the moblock.log.
		 */
		inline QString hits() const { return m_Hits; }
		/**
		 * @return The IP of the entry in the moblock log.
		 */
		inline QString IP() const { return m_IP; }
		/**
		 * @return The date the item was created.
		 */
		inline QString blockDate() const { return m_BlockDate; }
		/**
		 * @return The time the item was created.
		 */
		inline QString blockTime() const { return m_BlockTime; }
		
		itemType type;
		/**
		 * Compare this item with another LogItem.This function does not compare the items' hits.
		 * @param other The second item.
		 * @return True if the items are the same, otherwise false.
		 */
		bool operator==( const LogItem &other );
	private:
		void initDateTime(const QString &dateTime = QString() );
		/**
		 * Import an entry generated by moblock 0.8.
		 * @param entry The raw moblock log line.
		 */
		void importEntryVersion08( const QString &entry );
		void importEntry( const QString &entry );
		QString m_BlockDate;
		QString m_BlockTime;
		QString m_Name;
		QString m_Hits;
		QString m_IP;

};

/**
*
* @short A class used to get new LogItems and search previously blocked entries from the moblock log file
* 
**/
		

class PeerguardianLog : public QObject {

	Q_OBJECT

	public:
		/**
		 * Constructor. Creates an empty PeerguardianLog object with no log file set.
		 * @param parent The QObject parent of this object.
		 */
		PeerguardianLog( QObject *parent = 0 );
		/**
		 * Constructor. Creates a PeerguardianLog object and sets the log path.
		 * NOTE: PeerguardianLog doesn't really load any log files. 
		 * It just extracts the last blocks using the tail program.
		 * However, it saves a number(MAX_LOG_SIZE) of LogItems which appear in the LogFile after this object has been created. 
		 * Those items are saved into a FIFO queue so they can be easily handled.
		 * This way those items can be recalled later through the search functions.
		 * @param path The path to the moblock log file.
		 * @param parent The QObject parent of this object.
		 */
		PeerguardianLog(const QString &path, QObject *parent = 0 );
		/**
		 * Sets the path to the moblock log file.
		 * If the path is invalid and no path is already set, MOBLOCK_LOG_PATH is used instead.
		 * @param path The path to the moblock log file.
		 */
         
		void setFilePath( const QString &path, bool verified=false);
		QString getLogPath();
		/**
		 * Searches for a LogItem with the specific IP and type. 
		 * If no LogItem which matches the criteria is been found, an emtpy LogItem with type IGNORE is returned.
		 * @param IP The IP of the LogItem.
		 * @param type The type of the LogItem.
		 * @return The LogItem with the specifc IP, or an emtpy LogItem with type IGNORE.
		 */
		LogItem getItemByIP( const QString &IP, const itemType &type ) const;
		/**
		 * Searches for a LogItem with the specific name.
		 * If no LogItem which matches the criteria is been found, an emtpy LogItem with type IGNORE is returned.
		 * @param name The name of the LogItem.
		 * @return The LogItem with the specifc name, or an emtpy LogItem with type IGNORE.
		 */
		LogItem getItemByName( const QString &name ) const;

        static QString getFilePath();
        static QString getFilePath(const QString &path);
	
	public slots:
		/**
		 * Update the PeerguardianLog object with new data from the moblock log file.

		 * This function uses tail to get the latest blocked entry from the moblock log file. 
		 * After this it checks if the the entry is similar to the last one saved.
		 * If not, the new LogItem is saved and all signals are emited.
		 * If it is the same but the hits number is different  newItemHits is emited.
		 * 
		 * In each case, the function also handles the FIFO queue so that its size is always smalelr than MAX_LOG_SIZE.
		 * If there are two matching LogItems with different hits, the function removes the older from the queue and pushes the other into the queue's end.
		 * 
		 */
		void update();
		/**
		 * Clears the QList containing the saved LogItems.
		 */
		void clear();
        
        
	
	signals:
		/**
		 * Emited when a new LogItem appears in the moblock log file.
		 * @param  LogItem The new entry from the moblock log file as a LogItem object.
		 */
		void newItem( LogItem );
		/**
		 * Emited when a new LogItem appears in the moblock log file.
		 * Also emited when a LogItem with the same values but with different hits as the last one appears.
		 * @param  QString The hits number of the new LogItem.
		 */
		void newItemHits( QString );

	private:
		/**
		 * Get the last raw entry from the moblock log file.
		 * @return The last entry in the moblock log file as a QString.
		 */
		QString getNewItem() const;
		QString m_LogPath;
		QList< LogItem > m_ItemsList;
		bool firstTime;
		QString firstItem;
		
		
};

#endif


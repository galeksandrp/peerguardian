#!/bin/sh
# pglwhitelist - whitelisting helper script
#
# Copyright (C) 2014 jre <jre-phoenix@users.sourceforge.net>
#
# pgl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pgl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This script is a helper script especially for pglgui.
# Although it may be called from command line, it will only be useful with
# the default setup of pgl.
# It uses all iptables chains (INPUT, OUTPUT and FORWARD), uses RETURN as
# whitelisting target and assumes pgl's chains to have the default names.

# It doesn't do many checks. Especially it does not check whether pgl is
# running and if the iptables chains exist.

set -e

usage () {
    echo "Usage: $0 arg1 [arg2 ...]"
    echo "Arguments (port and ip are your chosen values):"
    echo "  [PERMANENT_]ADD_TCP_IN=port"
    echo "  [PERMANENT_]ADD_TCP_OUT=port"
    echo "  [PERMANENT_]ADD_TCP_FWD=port"
    echo "  [PERMANENT_]ADD_UDP_IN=port"
    echo "  [PERMANENT_]ADD_UDP_OUT=port"
    echo "  [PERMANENT_]ADD_UDP_FWD=port"
    echo "  [PERMANENT_]ADD_IP_IN=ip"
    echo "  [PERMANENT_]ADD_IP_OUT=ip"
    echo "  [PERMANENT_]ADD_IP_FWD=ip"
    echo "  [PERMANENT_]REMOVE_TCP_IN=port"
    echo "  [PERMANENT_]REMOVE_TCP_OUT=port"
    echo "  [PERMANENT_]REMOVE_TCP_FWD=port"
    echo "  [PERMANENT_]REMOVE_UDP_IN=port"
    echo "  [PERMANENT_]REMOVE_UDP_OUT=port"
    echo "  [PERMANENT_]REMOVE_UDP_FWD=port"
    echo "  [PERMANENT_]REMOVE_IP_IN=ip"
    echo "  [PERMANENT_]REMOVE_IP_OUT=ip"
    echo "  [PERMANENT_]REMOVE_IP_FWD=ip"
    echo "$(basename $0) updates pgl's iptables setup. If the argument starts"
    echo "with PERMANENT_ the value is also added to /etc/pgl/pglcmd.conf."
}

[ $# -gt 0 ] || { usage; exit 1; }

# Create temporary file TEMP safely:
TEMP=$(mktemp)
cat /etc/pgl/pglcmd.conf > "$TEMP"

make_permanent () {
    local is_present=no VALUE2=

    . "$TEMP"

    # VALUE is a port.
    if [ ! -z "$PROTO" ] ; then
        # VALUE is a port number.
        if [ "$VALUE" -gt 0 ] 2>/dev/null ; then
            # Get VALUE2 service name from /etc/services.
            VALUE2=$( grep "[[:space:]]${VALUE}/${PROTO}" /etc/services | sed "s|[[:space:]].*$||" )
        # VALUE is a service name.
        else
            # Get VALUE2 port number from /etc/services.
            VALUE2=$( grep "^${VALUE}[[:space:]].*/${PROTO}" /etc/services | sed "s|^${VALUE}[[:space:]]*\([[:digit:]]*\)/${PROTO}.*|\1|" )
        fi
    fi

    # Add VALUE.
    if [ "$MODE" = add ] ; then
        # VARIABLE is set in pglcmd.conf.
        if grep -q "^[[:space:]]*$VARIABLE=" $TEMP ; then
            for ITEM in $(eval echo \$$VARIABLE) ; do 
                 ITEMS="$ITEMS $ITEM"
                 [ "$ITEM" = "$VALUE" ] || [ "$ITEM" = "$VALUE2" ] 2>/dev/null && is_present=yes
            done
            if [ "$is_present" = no ] ; then
                # Add VALUE to VARIABLE values in pglcmd.conf.
                sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$ITEMS $VALUE\"|g" $TEMP
            fi
        # VARIABLE is not set in pglcmd.conf.
        else
            echo "" >> $TEMP
            # Add VARIABLE with VALUE set to pglcmd.conf.
            echo "$VARIABLE=\"$VALUE\"" >> $TEMP
        fi
    # Remove VALUE.
    else
        # VARIABLE is set in pglcmd.conf.
        if grep -q "^[[:space:]]*$VARIABLE=" $TEMP ; then
            for ITEM in $(eval echo \$$VARIABLE) ; do 
                # Keep all ITEMs except VALUE(2).
                { [ "$ITEM" = "$VALUE" ] || [ "$ITEM" = "$VALUE2" ] 2>/dev/null ; } && is_present=yes || ITEMS="$ITEMS $ITEM"
            done
            if [ "$is_present" = yes ] ; then
                # Remove VALUE from the VARIABLE values in pglcmd.conf.
                sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$ITEMS\"|g" $TEMP
            fi
        fi
    fi
}

for ARG in $@ ; do
case $ARG in
*ADD_TCP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_IN=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_in -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_TCP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_OUT=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_out -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_TCP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_FWD=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_fwd -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_IN=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_in -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_OUT=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_out -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_FWD=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_fwd -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_IP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_IN=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' || \
                iptables -I pgl_in --source $VALUE -j RETURN ; }"
    ;;
*ADD_IP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_OUT=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' || \
                iptables -I pgl_out --destination $VALUE -j RETURN ; }"
    ;;
*ADD_IP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_FWD=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' || \
                iptables -I pgl_fwd --source $VALUE -j RETURN ; } && \
              { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' || \
                iptables -I pgl_fwd --destination $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_IN=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_in -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_OUT=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_out -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_FWD=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_fwd -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_IN=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_in -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_OUT=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_out -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_FWD=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_fwd -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_IN=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' && \
                iptables -D pgl_in --source $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_OUT=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' && \
                iptables -D pgl_out --destination $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_FWD=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' && \
                iptables -D pgl_fwd --source $VALUE -j RETURN ; } && \
              { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' && \
                iptables -D pgl_fwd --destination $VALUE -j RETURN ; }"
    ;;
*)
    usage
    exit 1
    ;;
esac

# This connects every new CMD instance with &&
CMD="$CMD &&"

done

# Move the newly generated pglcmd.conf content.
CMD="$CMD cat "$TEMP" > /etc/pgl/pglcmd.conf"

# And finally execute all commands
eval $CMD
rm $TEMP
exit $?

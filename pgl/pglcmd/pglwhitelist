#!/bin/sh
# pglwhitelist - whitelisting helper script
#
# Copyright (C) 2014 jre <jre-phoenix@users.sourceforge.net>
#
# pgl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pgl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This script is a helper script especially for pglgui.
# Although it may be called from command line, it will only be useful with
# the default setup of pgl.
# It uses all iptables chains (INPUT, OUTPUT and FORWARD), uses RETURN as
# whitelisting target and assumes pgl's chains to have the default names.

# It doesn't do many checks. Especially it does not check whether pgl is
# running and if the iptables chains exist.

set -e

usage () {
    echo "Usage: $(basename $0) arg1 [arg2 ...]"
    echo "Arguments (port,ip and blocklist are your chosen values):"
    echo "$(basename $0) updates pgl's iptables setup. If the argument starts"
    echo "with PERMANENT_ the value is also added to /etc/pgl/pglcmd.conf."
    echo "  [PERMANENT_]ADD_TCP_IN=port"
    echo "  [PERMANENT_]ADD_TCP_OUT=port"
    echo "  [PERMANENT_]ADD_TCP_FWD=port"
    echo "  [PERMANENT_]ADD_UDP_IN=port"
    echo "  [PERMANENT_]ADD_UDP_OUT=port"
    echo "  [PERMANENT_]ADD_UDP_FWD=port"
    echo "  [PERMANENT_]ADD_IP_IN=ip"
    echo "  [PERMANENT_]ADD_IP_OUT=ip"
    echo "  [PERMANENT_]ADD_IP_FWD=ip"
    echo "  [PERMANENT_]REMOVE_TCP_IN=port"
    echo "  [PERMANENT_]REMOVE_TCP_OUT=port"
    echo "  [PERMANENT_]REMOVE_TCP_FWD=port"
    echo "  [PERMANENT_]REMOVE_UDP_IN=port"
    echo "  [PERMANENT_]REMOVE_UDP_OUT=port"
    echo "  [PERMANENT_]REMOVE_UDP_FWD=port"
    echo "  [PERMANENT_]REMOVE_IP_IN=ip"
    echo "  [PERMANENT_]REMOVE_IP_OUT=ip"
    echo "  [PERMANENT_]REMOVE_IP_FWD=ip"
    echo "  CRON=0|1"
    echo "  INIT=0|1"
    echo "  UNTICK_BLOCKLIST=blocklist"
    echo "  ADD_BLOCKLIST=blocklist"
    echo "  REMOVE_BLOCKLIST=blocklist"
}

[ $# -gt 0 ] || { usage; exit 1; }

# Create temporary file CONF (pglcmd.conf) safely:
CONF=$(mktemp)
cat /etc/pgl/pglcmd.conf > "$CONF"
conf_updated=0

# Create temporary file LIST (blocklists.list) safely:
LIST=$(mktemp)
cat /etc/pgl/blocklists.list > "$LIST"
list_updated=0

# Function to set the whitelisting configuration WHITE_... in pglcmd.conf.
# Uses the variables VALUE, MODE, PROTO, VARIABLE and PERMANENT.
make_permanent () {
    local is_present=no VALUE2=

    . "$CONF"

    # VALUE is a port.
    if [ ! -z "$PROTO" ] ; then
        # VALUE is a port number.
        if [ "$VALUE" -gt 0 ] 2>/dev/null ; then
            # Get VALUE2 service name from /etc/services.
            VALUE2=$( grep "[[:space:]]${VALUE}/${PROTO}" /etc/services | sed "s|[[:space:]].*$||" )
        # VALUE is a service name.
        else
            # Get VALUE2 port number from /etc/services.
            VALUE2=$( grep "^${VALUE}[[:space:]].*/${PROTO}" /etc/services | sed "s|^${VALUE}[[:space:]]*\([[:digit:]]*\)/${PROTO}.*|\1|" )
        fi
    fi

    # Add VALUE.
    if [ "$MODE" = add ] ; then
        # VARIABLE is set in pglcmd.conf.
        if grep -q "^[[:space:]]*$VARIABLE=" $CONF ; then
            for ITEM in $(eval echo \$$VARIABLE) ; do 
                 ITEMS="$ITEMS $ITEM"
                 [ "$ITEM" = "$VALUE" ] || [ "$ITEM" = "$VALUE2" ] 2>/dev/null && is_present=yes
            done
            if [ "$is_present" = no ] ; then
                # Remove trailing space
                ITEMS=$(echo $ITEMS)
                # Add VALUE to VARIABLE values in pglcmd.conf.
                sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$ITEMS $VALUE\"|g" $CONF
            fi
        # VARIABLE is not set in pglcmd.conf.
        else
#            echo "" >> $CONF
            # Add VARIABLE with VALUE set to pglcmd.conf.
            echo "$VARIABLE=\"$VALUE\"" >> $CONF
        fi
    # Remove VALUE.
    else
        # VARIABLE is set in pglcmd.conf.
        if grep -q "^[[:space:]]*$VARIABLE=" $CONF ; then
            for ITEM in $(eval echo \$$VARIABLE) ; do 
                # Keep all ITEMs except VALUE(2).
                { [ "$ITEM" = "$VALUE" ] || [ "$ITEM" = "$VALUE2" ] 2>/dev/null ; } && is_present=yes || ITEMS="$ITEMS $ITEM"
            done
            if [ "$is_present" = yes ] ; then
                # Remove trailing space
                ITEMS=$(echo $ITEMS)
                # Remove VALUE from the VARIABLE values in pglcmd.conf.
                sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$ITEMS\"|g" $CONF
            fi
        fi
    fi
    conf_updated=1
}

for ARG in $@ ; do

# This connects every new CMD instance with &&
[ -z "$CMD" ] || CMD="$CMD &&"

case $ARG in
*ADD_TCP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_IN=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_in -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_TCP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_OUT=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_out -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_TCP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_TCP_FWD=||")"
    MODE=add
    PROTO=tcp
    VARIABLE=WHITE_TCP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_fwd -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_IN=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_in -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_OUT=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_out -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_UDP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_UDP_FWD=||")"
    MODE=add
    PROTO=udp
    VARIABLE=WHITE_UDP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' || \
                iptables -I pgl_fwd -p udp --dport $VALUE -j RETURN ; }"
    ;;
*ADD_IP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_IN=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_IN
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' || \
                iptables -I pgl_in --source $VALUE -j RETURN ; }"
    ;;
*ADD_IP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_OUT=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_OUT
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' || \
                iptables -I pgl_out --destination $VALUE -j RETURN ; }"
    ;;
*ADD_IP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*ADD_IP_FWD=||")"
    MODE=add
    PROTO=
    VARIABLE=WHITE_IP_FWD
    PERMANENT=$(echo $ARG | sed "s|ADD.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' || \
                iptables -I pgl_fwd --source $VALUE -j RETURN ; } && \
              { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' || \
                iptables -I pgl_fwd --destination $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_IN=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_in -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_OUT=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_out -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_TCP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_TCP_FWD=||")"
    MODE=remove
    PROTO=tcp
    VARIABLE=WHITE_TCP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *tcp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_fwd -p tcp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_IN=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_in -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_OUT=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_out -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_UDP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_UDP_FWD=||")"
    MODE=remove
    PROTO=udp
    VARIABLE=WHITE_UDP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *udp *-- *0.0.0.0/0 *0.0.0.0/0 *tcp dpt:$VALUE *' && \
                iptables -D pgl_fwd -p udp --dport $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_IN=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_IN=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_IN
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_in -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' && \
                iptables -D pgl_in --source $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_OUT=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_OUT=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_OUT
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_out -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' && \
                iptables -D pgl_out --destination $VALUE -j RETURN ; }"
    ;;
*REMOVE_IP_FWD=*)
    VALUE="$(echo $ARG | sed s"|.*REMOVE_IP_FWD=||")"
    MODE=remove
    PROTO=
    VARIABLE=WHITE_IP_FWD
    PERMANENT=$(echo $ARG | sed "s|REMOVE.*||")
    [ "$PERMANENT" != PERMANENT_ ] || make_permanent
    CMD="$CMD { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *$VALUE *0.0.0.0/0 *' && \
                iptables -D pgl_fwd --source $VALUE -j RETURN ; } && \
              { iptables -L pgl_fwd -n | grep -qx 'RETURN *all *-- *0.0.0.0/0 *$VALUE *' && \
                iptables -D pgl_fwd --destination $VALUE -j RETURN ; }"
    ;;
"CRON=0"|"CRON=1")
    VALUE=$(echo $ARG | sed s"|CRON=||")
    VARIABLE=CRON
    # CRON is set in pglcmd.conf.
    if grep -q "^[[:space:]]*$VARIABLE=" $CONF ; then
        # Set CRON to new value in pglcmd.conf.
        sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$VALUE\"|g" $CONF
    # CRON is not set in pglcmd.conf.
    else
#        echo "" >> $CONF
        # Add VARIABLE with VALUE set to pglcmd.conf.
        echo "$VARIABLE=\"$VALUE\"" >> $CONF
    fi
    conf_updated=1
    ;;
"INIT=0"|"INIT=1")
    VALUE=$(echo $ARG | sed s"|INIT=||")
    VARIABLE=INIT
    # INIT is set in pglcmd.conf.
    if grep -q "^[[:space:]]*$VARIABLE=" $CONF ; then
        # Set INIT to new value in pglcmd.conf.
        sed -i "s|^[[:space:]]*$VARIABLE=.*|$VARIABLE=\"$VALUE\"|g" $CONF
    # INIT is not set in pglcmd.conf.
    else
#        echo "" >> $CONF
        # Add VARIABLE with VALUE set to pglcmd.conf.
        echo "$VARIABLE=\"$VALUE\"" >> $CONF
    fi
    conf_updated=1
    ;;
ADD_BLOCKLIST=*)
    VALUE=
    VALUE=$(echo $ARG | sed s"|.*BLOCKLIST=||")
    [ ! -z "$VALUE" ] || { echo "Error on argument ${ARG}."; usage; exit 1; }
    # Blocklist entry exists in blocklists.list, enable it.
    if grep -q "^.*${VALUE}$" $LIST ; then
        sed -i "s|^.*${VALUE}$|${VALUE}|" $LIST
    # Add new blocklist entry to blocklists.list.
    else
#        echo "" >> $CONF
        echo "$VALUE" >> $LIST
    fi
    list_updated=1
    ;;
UNTICK_BLOCKLIST=*)
    VALUE=
    VALUE=$(echo $ARG | sed s"|.*BLOCKLIST=||")
    [ ! -z "$VALUE" ] || { echo "Error on argument ${ARG}."; usage; exit 1; }
    # Disable blocklist entry/entries in blocklists.list.
    sed -i "s|^[[:space:]]*${VALUE}$|# ${VALUE}|g" $LIST
    list_updated=1
    ;;
REMOVE_BLOCKLIST=*)
    VALUE=
    VALUE=$(echo $ARG | sed s"|.*BLOCKLIST=||")
    [ ! -z "$VALUE" ] || { echo "Error on argument ${ARG}."; usage; exit 1; }
    # Remove blocklist entry/entries from blocklists.list.
    grep -v "$VALUE" $LIST > ${LIST}.tmp && mv ${LIST}.tmp $LIST
    list_updated=1
    ;;
*)
    echo "Error on argument ${ARG}."
    usage
    exit 1
    ;;
esac

done

# Add command to move the newly generated pglcmd.conf content, connect with && if necessary.
[ "$conf_updated" = 1 ] && { [ -z "$CMD" ] || CMD="$CMD &&" ;} && CMD="$CMD cat $CONF > /etc/pgl/pglcmd.conf" || true

# Add command to move the newly generated blocklists.list content, connect with && if necessary.
[ "$list_updated" = 1 ] && { [ -z "$CMD" ] || CMD="$CMD &&" ;} && CMD="$CMD cat $LIST > /etc/pgl/blocklists.list && pglcmd reload"

# And finally execute all commands
eval $CMD
rm -f $CONF $LIST
exit $?

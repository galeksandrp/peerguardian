#!/bin/sh
# postinst script for pglcmd
# see: dh_installdeb(1)

# Copyright (C) 2008 - 2010 jre <jre-phoenix@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

set -e

# summary of how this script can be called:
#   * <postinst> `configure' <most-recently-configured-version>
#   * <old-postinst> `abort-upgrade' <new version>
#   * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#     <new-version>
#   * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#     <failed-install-package> <version> `removing'
#     <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Note: Some of the following code is normally placed in debian/config and some
# would need to be present in both files.
# TODO: Bring it back there, but make sure that
# - purge cleans debconf db
# - configuration works (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=352697)

# Source debconf library.
. /usr/share/debconf/confmodule

db_version 2.0 || ( echo $? ; true )

# This (deb)conf script is capable of backing up
db_capb backup || ( echo $? ; true )

case "$1" in
    configure|reconfigure)
        true    # continue below
        ;;
    abort-upgrade|abort-remove|abort-deconfigure)
        exit 0
        ;;
    *)
        echo "postinst called with unknown argument \"$1\"" >&2
        exit 1
        ;;
esac

################################################################################
# The following code is common between pglcmd, pglcmd.wd,
# cron.daily, init, debian/pglcmd.postinst and blockcontrol2pglcmd.sh.

# if-up is similar, but exits successfully if CONTROL_MAIN is not there, yet.
# This can happen in early boot stages before local file systems are mounted.

# CONTROL_MAIN has to be set correctly in all just mentioned files.
# This is done by the pgl/pglcmd/Makefile based on the settings in the
# pgl/Makefile.
CONTROL_MAIN="/usr/lib/pgl/pglcmd.main"

# Configure pglcmd and load functions.
if [ -f "$CONTROL_MAIN" ] ; then
    . $CONTROL_MAIN || { echo "$0 Error: Failed to source $CONTROL_MAIN although this file exists."; exit 1; }
else
    echo "$0 Error 7: Missing file $CONTROL_MAIN."
    exit 7
fi

# End of the common code between pglcmd, pglcmd.wd,
# cron.daily, (if-up), init and debian/postinst.
################################################################################

VARIABLES="
    LOG_SYSLOG
    LOG_IPTABLES
    VERBOSITY
    INIT
    CRON
    WD
    NFQUEUE_NUMBER
    IPTABLES_SETTINGS
    IPTABLES_ACTIVATION
    REJECT
    REJECT_IN
    REJECT_OUT
    REJECT_FWD
    ACCEPT
    WHITE_LOCAL
    WHITE_TCP_OUT
    WHITE_UDP_OUT
    WHITE_TCP_IN
    WHITE_UDP_IN
    WHITE_TCP_FWD
    WHITE_UDP_FWD
    IP_REMOVE"

# Known lists
# Make sure LIST_NAME is also in debian/templates and LIST_NAME2LIST_URL
# other lists may be added manually to blocklists.list
LISTS_POSSIBLE="
    atma_atma
    Bluetack_ads
    Bluetack_badpeers
    Bluetack_bogon
    Bluetack_dshield
    Bluetack_edu
    Bluetack_for-non-lan-computers
    Bluetack_forum-spam
    Bluetack_hijacked
    Bluetack_iana-multicast
    Bluetack_iana-private
    Bluetack_iana-reserved
    Bluetack_level1
    Bluetack_level2
    Bluetack_level3
    Bluetack_Microsoft
    Bluetack_proxy
    Bluetack_rangetest
    Bluetack_spider
    Bluetack_spyware
    Bluetack_web-exploit
    Bluetack_webexploit-forumspam
    cidr-report_bogon
    dchubad_faker
    dchubad_hacker
    dchubad_pedophiles
    dchubad_spammer
    nexus23_ipfilterx
    peerblock_rapidshare
    spamhaus_drop
    TBG_Bogon
    TBG_Business_ISPs
    TBG_Educational_Institutions
    TBG_General_Corporate_Ranges
    TBG_Hijacked
    TBG_Primary_Threats
    TBG_Search_Engines
    "

# Transition some old blockcontrol configuration settings.
[ -x /usr/bin/blockcontrol2pglcmd.sh ] && blockcontrol2pglcmd.sh || true

# Translate human readable/debconf LIST_NAME to LIST_URL.
# If you change this function also adapt the function LIST_URL2LIST_NAME in pglcmd.lib!
LIST_NAME2LIST_URL () {
    case "$LIST_NAME" in
        Bluetack_level1)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/level-1
                list.iblocklist.com/?list=bt_level1
                www.bluetack.co.uk/config/level1.gz
                "
            ;;
        Bluetack_level2)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/level-2
                list.iblocklist.com/?list=bt_level2
                www.bluetack.co.uk/config/level2.gz
                "
            ;;
        Bluetack_level3)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/level-3
                list.iblocklist.com/?list=bt_level3
                www.bluetack.co.uk/config/level3.gz
                "
            ;;
        Bluetack_edu)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/edu
                list.iblocklist.com/?list=bt_edu
                www.bluetack.co.uk/config/edu.gz
                "
            ;;
        Bluetack_ads)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/ads-trackers-and-bad-pr0n
                list.iblocklist.com/?list=bt_ads
                www.bluetack.co.uk/config/ads-trackers-and-bad-pr0n.gz
                "
            ;;
        Bluetack_bogon)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/bogon
                list.iblocklist.com/?list=bt_bogon
                www.bluetack.co.uk/config/bogon.gz
                "
            ;;
        Bluetack_spyware)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/spyware
                list.iblocklist.com/?list=bt_spyware
                www.bluetack.co.uk/config/spyware.gz
                "
            ;;
        Bluetack_spider)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/spider
                list.iblocklist.com/?list=bt_spider
                www.bluetack.co.uk/config/spider.gz
                "
            ;;
        Bluetack_Microsoft)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/microsoft
                list.iblocklist.com/?list=bt_microsoft
                www.bluetack.co.uk/config/Microsoft.gz
                "
            ;;
        Bluetack_proxy)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/proxy
                list.iblocklist.com/?list=bt_proxy
                www.bluetack.co.uk/config/proxy.gz
                "
            ;;
        Bluetack_hijacked)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/hijacked
                list.iblocklist.com/?list=bt_hijacked
                www.bluetack.co.uk/config/hijacked.gz
                "
            ;;
        # Bluetack badpeers (previously known as templist)
        Bluetack_badpeers)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/bad-peers
                list.iblocklist.com/?list=bt_templist
                www.bluetack.co.uk/config/badpeers.gz
                "
            ;;
        Bluetack_rangetest)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/range-test
                list.iblocklist.com/?list=bt_rangetest
                www.bluetack.co.uk/config/rangetest.gz
                "
            ;;
        Bluetack_dshield)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/dshield
                list.iblocklist.com/?list=bt_dshield
                www.bluetack.co.uk/config/dshield.gz
                "
            ;;
        TBG_Primary_Threats)
            LIST_URL="
                list.iblocklist.com/lists/tbg/primary-threats
                list.iblocklist.com/?list=ijfqtofzixtwayqovmxn
                tbg.iblocklist.com/Lists/PrimaryThreats.zip"
            ;;
        TBG_General_Corporate_Ranges)
            LIST_URL="
                list.iblocklist.com/lists/tbg/general-corporate-ranges
                list.iblocklist.com/?list=ecqbsykllnadihkdirsh
                tbg.iblocklist.com/Lists/GeneralCorporateRanges.zip"
            ;;
        TBG_Business_ISPs)
            LIST_URL="
                list.iblocklist.com/lists/tbg/business-isps
                list.iblocklist.com/?list=jcjfaxgyyshvdbceroxf
                tbg.iblocklist.com/Lists/BusinessISPs.zip"
            ;;
        TBG_Educational_Institutions)
            LIST_URL="
                list.iblocklist.com/lists/tbg/educational-institutions
                list.iblocklist.com/?list=lljggjrpmefcwqknpalp
                tbg.iblocklist.com/Lists/Educational-Institutions.zip"
            ;;
        TBG_Search_Engines)
            LIST_URL="
                list.iblocklist.com/lists/tbg/search-engines
                list.iblocklist.com/?list=pfefqteoxlfzopecdtyw
                tbg.iblocklist.com/Lists/SearchEngines.zip"
            ;;
        TBG_Hijacked)
            LIST_URL="
                list.iblocklist.com/lists/tbg/hijacked
                list.iblocklist.com/?list=tbnuqfclfkemqivekikv
                tbg.iblocklist.com/Lists/Hijacked.zip"
            ;;
        TBG_Bogon)
            LIST_URL="
                list.iblocklist.com/lists/tbg/bogon
                list.iblocklist.com/?list=ewqglwibdgjttwttrinl
                tbg.iblocklist.com/Lists/Bogon.zip"
            ;;
        atma_atma)
            LIST_URL="
                list.iblocklist.com/lists/atma/atma
                list.iblocklist.com/?list=tzmtqbbsgbtfxainogvm
                "
            ;;
        Bluetack_for-non-lan-computers)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/for-non-lan-computers
                list.iblocklist.com/?list=jhaoawihmfxgnvmaqffp
                "
            ;;
        Bluetack_forum-spam)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/forum-spam
                list.iblocklist.com/?list=ficutxiwawokxlcyoeye
                "
            ;;
        Bluetack_iana-multicast)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/iana-multicast
                list.iblocklist.com/?list=pwqnlynprfgtjbgqoizj
                "
            ;;
        Bluetack_iana-private)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/iana-private
                list.iblocklist.com/?list=cslpybexmxyuacbyuvib
                "
            ;;
        Bluetack_iana-reserved)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/iana-reserved
                list.iblocklist.com/?list=bcoepfyewziejvcqyhqo
                "
            ;;
        Bluetack_web-exploit)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/web-exploit
                list.iblocklist.com/?list=ghlzqtqxnzctvvajwwag
                "
            ;;
        Bluetack_webexploit-forumspam)
            LIST_URL="
                list.iblocklist.com/lists/bluetack/webexploit-forumspam
                list.iblocklist.com/?list=ficutxiwawokxlcyoeye
                "
            ;;
        cidr-report_bogon)
            LIST_URL="
                list.iblocklist.com/lists/cidr-report/bogon
                list.iblocklist.com/?list=cr_bogon
                "
            ;;
        dchubad_faker)
            LIST_URL="
                list.iblocklist.com/lists/dchubad/faker
                list.iblocklist.com/?list=dcha_faker
                "
            ;;
        dchubad_hacker)
            LIST_URL="
                list.iblocklist.com/lists/dchubad/hacker
                list.iblocklist.com/?list=dcha_hacker
                "
            ;;
        dchubad_pedophiles)
            LIST_URL="
                list.iblocklist.com/lists/dchubad/pedophiles
                list.iblocklist.com/?list=dcha_pedophiles
                "
            ;;
        dchubad_spammer)
            LIST_URL="
                list.iblocklist.com/lists/dchubad/spammer
                list.iblocklist.com/?list=dcha_spammer
                "
            ;;
        nexus23_ipfilterx)
            LIST_URL="
                list.iblocklist.com/lists/nexus23/ipfilterx
                list.iblocklist.com/?list=nxs23_ipfilterx
                "
            ;;
        peerblock_rapidshare)
            LIST_URL="
                list.iblocklist.com/lists/peerblock/rapidshare
                list.iblocklist.com/?list=zfucwtjkfwkalytktyiw
                "
            ;;
        spamhaus_drop)
            LIST_URL="
                list.iblocklist.com/lists/spamhaus/drop
                list.iblocklist.com/?list=sh_drop
                "
            ;;
        *)
            LIST_URL="$LIST_NAME"
            ;;
    esac
    # Escape ? (\?) for "grep -E":
    LIST_URL_REGEX="$(echo $LIST_URL | sed "s/\?/\\\?/g")"
}

###############################################################################

# Store values from configuration files into debconf db.

for VAR in $VARIABLES ; do
    # We don't need to check if the variable is set, because we also source
    # pglcmd.defaults, where all variables are set.
    # TODO: This has to be changed if the debconf part is moved to config again
    # (then it can run, before any variable is set).
    eval VALUE=\$$VAR
    case "$VAR" in
        'LOG_IPTABLES')
            case "$VALUE" in
                '')
                    db_set pglcmd/$VAR 'Do not log blocked packets to syslog.'
                    ;;
                'LOG --log-level info')
                    db_set pglcmd/$VAR 'Log blocked packets to syslog.'
                    ;;
                *)
                    db_set pglcmd/$VAR 'Do not touch my settings. Use the current custom value instead.'
                    ;;
            esac
            ;;

        'VERBOSITY')
            case "$VALUE" in
                '0')
                    db_set pglcmd/$VAR 'Output to STDOUT is off (only errors will be reported).'
                    ;;
                '1')
                    db_set pglcmd/$VAR 'Output to STDOUT is on.'
                    ;;
                '2')
                    db_set pglcmd/$VAR 'Output to STDOUT is on but no warning will be shown if an operation is configured not to be executed.'
                    ;;
            esac
            ;;

        'IPTABLES_SETTINGS')
            case "$VALUE" in
                '0')
                    db_set pglcmd/$VAR 'Do not set any iptables rules. You or another script/firewall has to do this!'
                    ;;
                '1')
                    db_set pglcmd/$VAR 'Use separate iptables chains.'
                    ;;
                '2')
                    db_set pglcmd/$VAR 'Only set custom iptables rules.'
                    ;;
            esac
            ;;

        'IPTABLES_ACTIVATION')
            case "$VALUE" in
                '0')
                    db_set pglcmd/$VAR 'Do nothing. You or another script/firewall has to do this!'
                    ;;
                '1')
                    db_set pglcmd/$VAR 'Send all NEW traffic to the iptables chains.'
                    ;;
                '2')
                    db_set pglcmd/$VAR 'Send all traffic to the iptables chains.'
                    ;;
            esac
            ;;

        'REJECT_IN'|'REJECT_OUT'|'REJECT_FWD')
            case "$VALUE" in
                'DROP'|'REJECT')
                    db_set pglcmd/$VAR "$VALUE"
                    ;;
                *)
                    db_set pglcmd/$VAR 'Do not touch my settings. Use the current custom value instead.'
                    ;;
            esac
            ;;

        'WHITE_LOCAL')
            case "$VALUE" in
                '0')
                    db_set pglcmd/$VAR 'No automatic whitelisting.'
                    ;;
                '1')
                    db_set pglcmd/$VAR 'Automatic whitelisting of LAN and DNS server and loopback device.'
                    ;;
                '2')
                    db_set pglcmd/$VAR 'Automatic whitelisting of DNS server and loopback device.'
                    ;;
            esac
            ;;

        # For boolean variables:
        'LOG_SYSLOG'|'INIT'|'CRON'|'WD'|'REJECT'|'ACCEPT')
            case "$VALUE" in
                '0')
                    db_set pglcmd/$VAR false
                    ;;
                '1')
                    db_set pglcmd/$VAR true
                    ;;
                *)
                    echo "WARNING: unknown value (\"$VALUE\") for $VAR. Ignoring."
                    ;;
            esac
            ;;

        # For all other variables:
        *)
            db_set pglcmd/$VAR $VALUE
            ;;
    esac
done

# Set the blocklists to be used.
[ -f "$BLOCKLISTS_LIST" ] && {
    # Gives possible lists separated with |:
    LISTS_POSSIBLE_PIPE="$(echo $LISTS_POSSIBLE | sed 's/\ /|/g')"
    # Read the non-comment|not-empty lines from BLOCKLISTS_LIST:
    set_LISTS_URL
    for LIST in $LISTS_URL ; do
        # This function depends on LIST:
        LIST_URL2LIST_NAME
        # Gives currently selected (=configured in blocklists.list and known by debconf) lists:
        LISTS_SET="$LISTS_SET $(echo $LIST_NAME | grep -Eo "$LISTS_POSSIBLE_PIPE" || true)"
    done
    # Gives currently selected lists separated with ", " for debconf:
    LISTS_SET_COMMA="$(echo $LISTS_SET | sed 's/\ /,\ /g')"
    db_set pglcmd/blocklists "$LISTS_SET_COMMA"
} || true

# Set "Add line to allowlist" to empty value because adding the same
# line several times does not make much sense.
db_set pglcmd/allowlist




###############################################################################




# Ask debconf's questions.

STATE=1
DONTSET=0   # Used for variables that do their own db_go
while true ; do
    case "$STATE" in
    '1')
        db_input critical pglcmd/warning_block || true
        ;;
    '2')
        db_input critical pglcmd/warning_firewall || true
        ;;
    '3')
        db_input high pglcmd/blocklists || true
        ;;
    '4')
        db_input low pglcmd/LOG_SYSLOG || true
        db_input low pglcmd/LOG_IPTABLES || true
        db_input low pglcmd/VERBOSITY || true
        ;;
    '5')
        db_input critical pglcmd/INIT || true
        db_input medium pglcmd/CRON || true
        db_input medium pglcmd/WD || true
        ;;
    '6')    # This part contains the db_go here instead of at the end of the function.
        db_input low pglcmd/NFQUEUE_NUMBER && RETVAL=$? || { RETVAL=$? ; true ; }
        if db_go ; then
            # Check for valid setting, otherwise ask again
            db_get pglcmd/NFQUEUE_NUMBER
            if [ "$RET" -ge 0 ] && [ "$RET" -le 65535 ] ; then
                # Continue if value is valid
                STATE=$(($STATE + 1))
            elif [ "$RETVAL" -eq 30 ] ; then
                # Break if value is not valid but we're in non-interactive mode
                echo "Invalid NFQUEUE_NUMBER settings, aborting."
                break
            else
                echo "Invalid NFQUEUE_NUMBER setting, choose a number between 0 and 65535."
            fi
        else
            STATE=$(($STATE - 1))
        fi
        DONTSET=1
        ;;
    '7')
        db_input low pglcmd/IPTABLES_SETTINGS || true
        ;;
    '8')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input low pglcmd/IPTABLES_ACTIVATION || true
        fi
        ;;
    '9')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input low pglcmd/REJECT || true
        fi
        ;;
    '10')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_get pglcmd/REJECT
            if [ "$RET" = true ] ; then
                db_input low pglcmd/REJECT_IN || true
                db_input low pglcmd/REJECT_OUT || true
                db_input low pglcmd/REJECT_FWD || true
            fi
        fi
        ;;
    '11')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input low pglcmd/ACCEPT || true
        fi
        ;;
    '12')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input high pglcmd/info_whitelisting || true
        fi
        ;;
    '13')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input high pglcmd/WHITE_TCP_OUT || true
            db_input high pglcmd/WHITE_UDP_OUT || true
            db_input high pglcmd/WHITE_TCP_IN || true
            db_input high pglcmd/WHITE_UDP_IN || true
            db_input high pglcmd/WHITE_TCP_FWD || true
            db_input high pglcmd/WHITE_UDP_FWD || true
        fi
        ;;
    '14')
        db_get pglcmd/IPTABLES_SETTINGS
        if [ "$RET" = "Use separate iptables chains." ] ; then
            db_input high pglcmd/WHITE_LOCAL || true
            db_input high pglcmd/allowlist || true
            db_input low pglcmd/IP_REMOVE || true
        fi
        ;;
    *)
        # The default case catches when $STATE is greater than the
        # last implemented state, and breaks out of the loop. This
        # requires that states be numbered consecutively from 1
        # with no gaps, as the default case will also be entered
        # if there is a break in the numbering
        break # exits the enclosing "while" loop
        ;;
    esac
    # Go on in the state machine. If DONTSET is set a question did handle this on its own.
    [ "$DONTSET" -eq 1 ] && DONTSET=0 || {
        if db_go ; then
            STATE=$(($STATE + 1))
        elif [ "$STATE" -eq 1 ]; then
            # The user has asked to back up from the first
            # question. This case is problematical. Regular
            # dpkg and apt package installation isn’t capable
            # of backing up questions between packages as this
            # is written, so this will exit leaving the package
            # unconfigured - probably the best way to handle
            # the situation.
            exit 10
        else
            STATE=$(($STATE - 1))
        fi
    }
done




###############################################################################




# Define function for debconf's db_get. Usage my_db_get $1, where $1 is the
# variable set in debconf. The name of the package is already set within this
# function.
# Remove invalid characters (" or |) from $RET
my_db_get () {
    # Test if exactly $1 was specified.
    [ "$#" = 1 ] || { echo "Internal script error. Aborting."; exit 1; }
    db_get pglcmd/$1
    # Assigning the fixed value to the same variable again seems to work.
    RET="$( echo "$RET" | \
        sed "s|\"||g" | \
        sed "s|\|||g" )"
	# If the value is set in pglcmd.conf, then set it there:
	if [ -f "$CMD_CONF" ] && grep -Eq "^[[:space:]]*$1=" $CMD_CONF ; then
		CONFFILE=$CMD_CONF
	else
		CONFFILE=$CMD_DEFAULTS
	fi
}

# Substitute in the values from the debconf db.
# See `man debconf-devel`
# Non-default values will be set in default.
# Default values will be set in default if they were set there already,
# otherwise they will be set in pglcmd.conf


# $RET of db_get gives selected lists separated with (", ").
db_get pglcmd/blocklists

# If all lists were deselected replace empty value with dummy, otherwise
# LISTS_XGET will stay empty although it should contain all LISTs:
LISTS_GET_NAME_COMMA=${RET:-dummy}
LISTS_GET_NAME="$(echo $LISTS_GET_NAME_COMMA | sed 's/,//g')"

# Add (if necessary) selected blocklists to blocklists.list
for LIST_NAME in $LISTS_GET_NAME ; do
    # Translate human readable/debconf LIST_NAME to LIST_URL.
    LIST_NAME2LIST_URL
    # Reset variable that tells whether URL is already in blocklists.list
    URL_SELECTED=""
    # Add selected lists to blocklists.list
    if [ "$LIST_URL" = dummy ] ; then
        # just ignore the dummy
        true
    else
        for i in $LIST_URL_REGEX ; do
            if grep -Eq "^[[:space:]]*(http://)?$i" $BLOCKLISTS_LIST ; then
                # LIST_URL is already selected.
                URL_SELECTED="yes"
                break
            fi
        done
        [ "$URL_SELECTED" = yes ] || {
            for i in $LIST_URL_REGEX ; do
                if grep -Eq "^#[[:space:]]*(http://)?$i$" $BLOCKLISTS_LIST ; then
                    # LIST is commented, uncomment it.
                    # The REGEX is very strict, so that no user changes get lost.
                    # An occurence of http:// is kept on uncommenting.
                    sed -i -r "s|^#[[:space:]]*((http://)?$i)$|\1|" $BLOCKLISTS_LIST
                    URL_SELECTED="yes"
                    break
                fi
            done
            }
        [ "$URL_SELECTED" = yes ] || {
            # LIST is not in blocklists.list (at least not in the very strict form described before).
            echo >> $BLOCKLISTS_LIST
            echo "# Added by debconf:" >> $BLOCKLISTS_LIST
            # Add the first entry (before first "space") to blocklsits.list
            echo $LIST_URL | sed "s| .*||" >> $BLOCKLISTS_LIST
            }
    fi
done

# Gives selected lists separated with "|":
LISTS_GET_NAME_PIPE="$(echo $LISTS_GET_NAME | sed "s/\ /\|/g")"
for LIST_NAME in $LISTS_POSSIBLE ; do
    # Gives deselected (known to debconf but configured to be not used) lists separated with space:
    LISTS_XGET="$LISTS_XGET $(echo $LIST_NAME | grep -Ev $LISTS_GET_NAME_PIPE || true)"
done

# These lists were deselected.
for LIST_NAME in $LISTS_XGET ; do
    # Translate human readable/debconf LIST_NAME to LIST_URL.
    LIST_NAME2LIST_URL
    for i in $LIST_URL_REGEX ; do
        # Remove deselected lists from blocklists.list
        if grep -Eq "^[[:space:]]*(http://)?$i" $BLOCKLISTS_LIST ; then
            # List is currently selected, add a # in front of pattern
            sed -i -r "s|^[[:space:]]*(http://)?$i|#&|" $BLOCKLISTS_LIST
        fi
    done
done

# Remove unavailable lists from blocklists.list:
for LIST_URL in www.bluetack.co.uk/config/nipfilter.dat.gz www.bluetack.co.uk/config/pipfilter.dat.gz ; do
    if grep -Eq "^[[:space:]]*(http://)?$LIST_URL" $BLOCKLISTS_LIST ; then
        echo -n "Disabling $LIST_URL because it is no more downloadable directly"
        sed -i -r "s|^[[:space:]]*(http://)?$LIST_URL|# Disabled because list is no more downloadable directly: &|" $BLOCKLISTS_LIST
        echo "."
    fi
done

my_db_get LOG_SYSLOG
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*LOG_SYSLOG=.*|LOG_SYSLOG=\"0\"|" $CMD_CONF
        else
            echo "LOG_SYSLOG=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*LOG_SYSLOG=.*|LOG_SYSLOG=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get LOG_IPTABLES
case "$RET" in
    'Do not log blocked packets to syslog.')    # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*LOG_IPTABLES=.*|LOG_IPTABLES=\"\"|" $CMD_CONF
        fi
        ;;
    'Log blocked packets to syslog.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*LOG_IPTABLES=.*|LOG_IPTABLES=\"LOG --log-level info\"|" $CMD_CONF
        else
            echo "LOG_IPTABLES=\"LOG --log-level info\"" >> $CMD_CONF
        fi
        ;;
    'Do not touch my settings. Use the current custom value instead.')
        true
        ;;
esac

my_db_get VERBOSITY
case "$RET" in
    'Output to STDOUT is off (only errors will be reported).')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*VERBOSITY=.*|VERBOSITY=\"0\"|" $CMD_CONF
        else
            echo "VERBOSITY=\"0\"" >> $CMD_CONF
        fi
        ;;
    'Output to STDOUT is on.')  # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*VERBOSITY=.*|VERBOSITY=\"1\"|" $CMD_CONF
        fi
        ;;
    'Output to STDOUT is on but no warning will be shown if an operation is configured not to be executed.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*VERBOSITY=.*|VERBOSITY=\"2\"|" $CMD_CONF
        else
            echo "VERBOSITY=\"2\"" >> $CMD_CONF
        fi
        ;;
esac

my_db_get INIT
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*INIT=.*|INIT=\"0\"|" $CMD_CONF
        else
            echo "INIT=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*INIT=.*|INIT=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get CRON
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*CRON=.*|CRON=\"0\"|" $CMD_CONF
        else
            echo "CRON=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*CRON=.*|CRON=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get WD
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WD=.*|WD=\"0\"|" $CMD_CONF
        else
            echo "WD=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WD=.*|WD=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get NFQUEUE_NUMBER
if [ "$RET" = 92 ] ; then   # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*NFQUEUE_NUMBER=.*|NFQUEUE_NUMBER=\"$RET\"|" $CMD_CONF
    fi
else
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*NFQUEUE_NUMBER=.*|NFQUEUE_NUMBER=\"$RET\"|" $CMD_CONF
    else
        echo "NFQUEUE_NUMBER=\"$RET\"" >> $CMD_CONF
    fi
fi

my_db_get IPTABLES_SETTINGS
case "$RET" in
    'Do not set any iptables rules. You or another script/firewall has to do this!')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_SETTINGS=.*|IPTABLES_SETTINGS=\"0\"|" $CMD_CONF
        else
            echo "IPTABLES_SETTINGS=\"0\"" >> $CMD_CONF
        fi
        ;;
    'Use separate iptables chains.')    # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_SETTINGS=.*|IPTABLES_SETTINGS=\"1\"|" $CMD_CONF
        fi
        ;;
    'Only set custom iptables rules.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_SETTINGS=.*|IPTABLES_SETTINGS=\"2\"|" $CMD_CONF
        else
            echo "IPTABLES_SETTINGS=\"2\"" >> $CMD_CONF
        fi
        ;;
esac

my_db_get IPTABLES_ACTIVATION
case "$RET" in
    'Do nothing. You or another script/firewall has to do this!')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_ACTIVATION=.*|IPTABLES_ACTIVATION=\"0\"|" $CMD_CONF
        else
            echo "IPTABLES_ACTIVATION=\"0\"" >> $CMD_CONF
        fi
        ;;
    'Send all NEW traffic to the iptables chains.') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_ACTIVATION=.*|IPTABLES_ACTIVATION=\"1\"|" $CMD_CONF
        fi
        ;;
    'Send all traffic to the iptables chains.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*IPTABLES_ACTIVATION=.*|IPTABLES_ACTIVATION=\"2\"|" $CMD_CONF
        else
            echo "IPTABLES_ACTIVATION=\"2\"" >> $CMD_CONF
        fi
        ;;
esac

my_db_get REJECT
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT=.*|REJECT=\"0\"|" $CMD_CONF
        else
            echo "REJECT=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT=.*|REJECT=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get REJECT_IN
case "$RET" in
    'DROP') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_IN=.*|REJECT_IN=\"$RET\"|" $CMD_CONF
        fi
        ;;
    'REJECT')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_IN=.*|REJECT_IN=\"$RET\"|" $CMD_CONF
        else
            echo "REJECT_IN=\"$RET\"" >> $CMD_CONF
        fi
        ;;
    'Do not touch my settings. Use the current custom value instead.')
        true
        ;;
esac

my_db_get REJECT_OUT
case "$RET" in
    'DROP')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_OUT=.*|REJECT_OUT=\"$RET\"|" $CMD_CONF
        else
            echo "REJECT_OUT=\"$RET\"" >> $CMD_CONF
        fi
        ;;
    'REJECT')   # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_OUT=.*|REJECT_OUT=\"$RET\"|" $CMD_CONF
        fi
        ;;
    'Do not touch my settings. Use the current custom value instead.')
        true
        ;;
esac

my_db_get REJECT_FWD
case "$RET" in
    'DROP') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_FWD=.*|REJECT_FWD=\"$RET\"|" $CMD_CONF
        fi
        ;;
    'REJECT')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*REJECT_FWD=.*|REJECT_FWD=\"$RET\"|" $CMD_CONF
        else
            echo "REJECT_FWD=\"$RET\"" >> $CMD_CONF
        fi
        ;;
    'Do not touch my settings. Use the current custom value instead.')
        true
        ;;
esac

my_db_get ACCEPT
case "$RET" in
    'false')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*ACCEPT=.*|ACCEPT=\"0\"|" $CMD_CONF
        else
            echo "ACCEPT=\"0\"" >> $CMD_CONF
        fi
        ;;
    'true') # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*ACCEPT=.*|ACCEPT=\"1\"|" $CMD_CONF
        fi
        ;;
esac

my_db_get WHITE_TCP_OUT
if [ -z "$RET" ] ; then # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_OUT=.*|WHITE_TCP_OUT=\"\"|" $CMD_CONF
    fi
else
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_OUT=.*|WHITE_TCP_OUT=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_TCP_OUT=\"$RET\"" >> $CMD_CONF
    fi
fi

my_db_get WHITE_UDP_OUT
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_UDP_OUT=.*|WHITE_UDP_OUT=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_UDP_OUT=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WHITE_UDP_OUT=.*|WHITE_UDP_OUT=\"$RET\"|" $CMD_CONF
        fi
fi

my_db_get WHITE_TCP_IN
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_IN=.*|WHITE_TCP_IN=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_TCP_IN=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_IN=.*|WHITE_TCP_IN=\"$RET\"|" $CMD_CONF
    fi
fi

my_db_get WHITE_UDP_IN
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_UDP_IN=.*|WHITE_UDP_IN=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_UDP_IN=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_UDP_IN=.*|WHITE_UDP_IN=\"$RET\"|" $CMD_CONF
    fi
fi

my_db_get WHITE_TCP_FWD
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_FWD=.*|WHITE_TCP_FWD=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_TCP_FWD=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_TCP_FWD=.*|WHITE_TCP_FWD=\"$RET\"|" $CMD_CONF
    fi
fi

my_db_get WHITE_UDP_FWD
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_UDP_FWD=.*|WHITE_UDP_FWD=\"$RET\"|" $CMD_CONF
    else
        echo "WHITE_UDP_FWD=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*WHITE_UDP_FWD=.*|WHITE_UDP_FWD=\"$RET\"|" $CMD_CONF
    fi
fi

my_db_get WHITE_LOCAL
case "$RET" in
    'No automatic whitelisting.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WHITE_LOCAL=.*|WHITE_LOCAL=\"0\"|" $CMD_CONF
        else
            echo "WHITE_LOCAL=\"0\"" >> $CMD_CONF
        fi
        ;;
    'Automatic whitelisting of LAN and DNS server and loopback device.')    # Default
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WHITE_LOCAL=.*|WHITE_LOCAL=\"1\"|" $CMD_CONF
        fi
        ;;
    'Automatic whitelisting of DNS server and loopback device.')
        if [ "$CONFFILE" = "$CMD_CONF" ] ; then
            sed -i -r "s|^[[:space:]]*WHITE_LOCAL=.*|WHITE_LOCAL=\"2\"|" $CMD_CONF
        else
            echo "WHITE_LOCAL=\"2\"" >> $CMD_CONF
        fi
        ;;
esac

my_db_get IP_REMOVE
if [ -n "$RET" ] ; then
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*IP_REMOVE=.*|IP_REMOVE=\"$RET\"|" $CMD_CONF
    else
        echo "IP_REMOVE=\"$RET\"" >> $CMD_CONF
    fi
else    # Default
    if [ "$CONFFILE" = "$CMD_CONF" ] ; then
        sed -i -r "s|^[[:space:]]*IP_REMOVE=.*|IP_REMOVE=\"$RET\"|" $CMD_CONF
    fi
fi

# Add a line to the allow list.
# The configuration files must have been sourced already for this!
db_get pglcmd/allowlist
[ -z "$RET" ] || {
    echo "" >> "$ALLOW_OUT" # add newline first in case the current file lacks one!
    echo $RET >> "$ALLOW_OUT"
    if [ -n "$ALLOW_IN" ] && [ "$ALLOW_IN" != "$ALLOW_OUT" ] ; then
        echo "" >> "$ALLOW_IN"  # add newline first in case the current file lacks one!
        echo $RET >> "$ALLOW_IN"
    fi
    if [ -n "$ALLOW_FWD" ] && [ "$ALLOW_FWD" != "$ALLOW_OUT" ] ; then
        echo "" >> "$ALLOW_FWD"  # add newline first in case the current file lacks one!
        echo $RET >> "$ALLOW_FWD"
    fi
}

# done with debconf...
db_stop

# End of substitute in the values from the debconf db.




###############################################################################

if [ "$INIT" -ne 0 ] && [ -x "/etc/init.d/pgl" ] ; then
    # dh_installdeb inserts code to execute init "start".
    echo
    echo "$NAME will soon be started ..."
    echo "If any blocklists are missing, they will be downloaded. This may take several"
    echo "minutes. Please be patient and don't abort. If you want to follow the update"
    echo "process, then do in another terminal a"
    echo " tail -f $CMD_LOG"
    echo "The lists are saved to $BLOCKLISTS_DIR/."
    echo "The installation of $CMD_NAME will fail, if starting $NAME fails. So if"
    echo "downloading the blocklists fails temporarily, the installation will fail. In this"
    echo "case you may turn the automatic starting off by setting in $CMD_CONF:"
    echo " INIT=\"0\""
    echo "Then complete the installation. Afterwards you may turn the automatic start on"
    echo "again:"
    echo " sudo dpkg-reconfigure --force pglcmd"
    echo "Please be patient ..."
fi

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
